#+AUTHOR: Zachary O'Toole
#+TITLE: Writeup November 2019

** I. Overview
This CTF is from HTB, but I will omit the name of it to hopefully deter anyone from cheating the flag. Although, I am sure if someone tried, they could cross reference what I say here and figure it out. 
Anyway, this started out like many reversing CTFs: you are given a file. In this case, the file extention was ~.bin~, likely indicating a binary file. But, it never hurts to run a quick ~file~ command on it, which yields

#+begin_src
ctf.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=e8d44daa961ccb2cafc92c93b18b3edd522c0e74, stripped
#+end_src

Nothing too interesting here. We have a 64-bit ELF (Executable and linkable format) executable that has been stripped. ELF is a object file format compatible with linux-based systems and the fact that it has been stripped means symbolic 
information has been removed. For reversing, having symbolic information is always a blessing but never expected. In industry, you may find it more common to get an executable with symbolic information, depending on what you are 
reverse engineering. For instance, a project I worked on involved a *very* large application which had debug information. Without it, the effort would have likely been nearly impossible. Anyways, it looks like we can start digging into
the application.

** II. Running the program
A good first step is to just run the program (assuming you trust the source) and try to understand it from a user perspective. For many software reverse engineering (SWRE) efforts, it is imperative to unerstand the application 
from the user perspective, how inputs affect outputs, and gain as much knowledge as possible. Besides, this is usually the easiest part, so let's see what we get!

#+begin_src
$ chmod +x ctf.bin 
$ ./ctf.bin 
$ 
#+end_src

Nothing? Interesting. I guess this is not one of those programs. It looks like we will have to dive into the program using a debugger or decompiler to get an understanding of what is going on. I suppose this would be a good 
place to talk about tools. There are many, and everyone is going to have a preference with one or another. This might include gdb, radare, IDA, binary ninja, etc. Gosh, on linux, you can even use ~objdump -d~ and get a good idea of 
what is going on. Personally, I believe in learning a tool and trying to master it. So, I have chosen the NSA developed Ghidra for a couple of reasons. First, I think it will be an exceptionally capable program in the near future, as long as 
the NSA continues to develop it. Second, it's FREE. Hard to argue with a good bargain. So, let's load this into Ghidra and see what we can find.

** III. Static analysis
Finally, we can actually start reverse engineering this program. I am going to omit how to get Ghidra up and running-- its a fairly straight-forward process. However, it may take a bit more time to get used to navigating Ghidra. There are some nice features I'd like to mention before diving into things. First, the decompiler is very powerful. It provides a *pseudocode* representation of the assembly code, usually resembling a C/C++ style syntax. With that being said, it does not decompile some portions very well (at all). This is where your extensive knowledge as a reverse engineer would come into play! But, I digress. The decompiler will only be marginally helpful for this application as it was likely written in assembly. Another feature I wanted to highlight is the function call graph. This window creates a hierarchical graph of how a function is called and what it calls. For larger programs, this can be helpful with figuring out how specific functions fit within the overall context of the application. So, what does Ghidra look like then? The following figure shows the top of the disassembly in the **Listing** window. 

[[./img/iii_initialview.jpg]]

Really, this is pretty basic stuff. There are plenty of tools that spit out the disassembly of a binary. It is, however, important to know that this window is still very valuable for the following reason. Decompilers are not 100% accurate. This is due to the fact that a lot of information is lost when the program is compiled, especially without symbols. I am not too well-versed on how decompilation algorithms work, but I am optimistic they will improve with time. Until then, it is still important for people doing reversing to be very comfortable with assembly code to verify or correct what the decompiler produces. So, let's take a look at what the decompiled code looks like. The following screenshots are of interesting functions in the binary.

[[./img/iii_func1.png]]
[[./img/iii_func2.png]]
[[./img/iii_func3.png]]
[[./img/iii_func4.png]]

I went ahead and renamed them after a quick to determine what the function might do. The following table shows each:

|   | Original Name | New Name                | Brief Description                                                                                   |   |
|---+---------------+-------------------------+-----------------------------------------------------------------------------------------------------+---|
| 1 | FUN_004008fd  | main                    | The entry function calls this function, equivalent to main                                          |   |
| 2 | FUN_004009aa  | secretPasswordFileCheck | This is called from the main function, looks like it opens a file and checks its contents against a |   |
| 3 | FUN_00400a5b  | flagGenerator1          | Looks like it is responsible for generating (probably) the wrong flag                               |   |
| 4 | FUN_00400afe  | flagGenerator2          | Unreachable, but similar to the flagGenerator1                                                      |   |

Additionally, I might as well include the full function call tree. It is pretty interesting and a neat feature of Ghidra. 

[[./img/function_call_tree.png]]

This figure allows us to see the whole picture after having renamed some functions. We can get a good understanding of how the program acts as a whole. As we can see, (4) does not get called in the tree. After reading through the code in (3), this will likely be a problem we have to consider later. But for now, we can just go through the normal execution cycle of the program statically. 

From here on, I will explain what I am doing and avoid putting in much more code. Let's take a look at (1). The first part seems to be using a pseudo-random number generator using the time as a seed. This seems like a good way to produce random numbers as each runtime will produce a different seed and ultimately number. After some control flow, it starts calling some of the other functions. 

***** A. Initial Impression 
Initially, I was really curious about (2). Without too much inspection, it looks like the function opens the file "/tmp/secret" and reads in the contents, checking it against the password. So, we can easily make that file and see if the output changes. Spoiler, it doesn't. There must be some exit call before we hit the flag generator function. Low and behold, the secret password function exits if the return value of strcmp is 0, which occurs when the strings are the same (lines 21-23 of (2)). This can be solved with a simple patch. The plan is to change the JNZ to a JZ opcode, which effectively negates the if-statement. To do this, I am using emacs hexl mode. We just need to get the address from Ghidra, which can be done by referring to the listing. Then, we must locate the opcode for JNZ (should be 74) and change it to the opcode for JZ (should be 75). Note, you will have to pay attention to the operands and addressing modes. They must match up for this simple patch to work. After loading the new binary into Ghidra, we can see the logic has changed.

[[./img/patch1.png]]

But we have more work to do. After running, nothing happens again. This after inspecting the return values of the function, we can see there are some specific cases where the function returns 1. Looking at (1), it exits if the return value is 0. So, we want (2) to return 1 or to change the logic in (1). Solution? Another patch! We can even do a patch similar to the one previously mentioned. Instead of JNZ to JZ, we can do JZ to JNZ and negate the logic. After running the binary, we finally got an output! 

#+begin_src
231262d7212431267311f2631201f312d
Are you sure it's the right one? ..
#+end_src

But, this is not the flag, evidenced by second line it prints and confirmed by the fact that submission yields nothing. With that being said, progress has been made, and we can continue to try some different things. 

Here, we can clearly tell the programmer is trying to provide us with some hint. This is likely not the correct flag generator. Remember that unreachable function from earlier? Maybe that could be the correct function to run. 

Again, I fired up the hex editor provided by emacs and patched the program such that the program would run the hidden function (4) instead of (3). This can be done by simply changing the control flow logic in function (1). Now, when we run the program, we get the following output in the terminal:

#+begin_src
ffffffc3ffffffdcffffffddffffffdbffffffd7ffffffdcffffffddffffffcaffffffe7ffffffcbffffffccffffffddffffffdeffffffd9ffffffd6ffffffd7ffffff89ffffff89ffffff80ffffffe7ffffff99ffffff99ffffffe7ffffffc5
--hit any key
#+end_src

Clearly, we are not quite there yet. No matter what inputs, we always get this output. From here, I got pretty lost, so I decided to revisit static analysis for some more hints.

***** A. Take 2

There are some really interesting sections of data used within the binary. These are just bytes of random (or not so random) data. Let's take a look at the context of how they are used, and maybe we can figure out what they are. 

- Section 1
[[./img/data_section1.png]]

After some investigation, the above section of code appears to be involved in generating the flag in (4). In particular, each byte is XOR'ed with the argument passed into the function. So, I went ahead an made a python script to brute force the possible keys for me. Below, you can see the very simple script that does just that.

#+begin_src python
import subprocess
import os

xorkey = [0x23,0x3c,0x3d,0x3b,0x37,0x37,0x3c,0x3d,0x2a,0x07,0x2b,0x2c,0x3d,0x3e,0x39,0x36,0x37,0x69,0x69,0x60,0x07,0x79,0x79,0x07,0x25,0x0]

for arg in range(1,127):
    print("\n-- Iterator: " + str(arg))
    for xkey in xorkey:
        print(str(chr(xkey^arg)), end ="")
#+end_src

The script is very simple. We first need to pull out the XOR bytes (denoted keys) from the code and put them into a list in the correct order. Then, we can brute force the flag by providing inputs spanning 1 through 127. These numbers were determined by the control logic in (1). The program looks for inputs that are negative numbers and provides a trash result. Similarly, it checks for the a value of 0x7F or 127. You might be thinking about inputs larger than 127. It would appear that the program casts the variable to *char* type, which is only two bytes long. Anyting over 128 (decimal) would be truncated to be a value of 128. Anyway, after running the script, we can actually just sift through the results and see if anything makes sense. 

#+begin_src
-- Iterator: 87
tkjl``kj}P|{jina`>>7P..Pr
-- Iterator: 88
{deco****_**********_!!_}
-- Iterator: 89
zedbnneds^rudg`on009^  ^|
#+end_src

Interesting, iterator 88 looks very interesting! Turns out the flag is very attainable by reading the code. 

